// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
	Spec   *VirtualServiceSpec    `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpec struct {
	// A list of namespaces to which this virtual service is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The names of gateways and sidecars that should apply these routes.
	Gateways []string `pulumi:"gateways"`
	// The destination hosts to which traffic is being sent.
	Hosts []string `pulumi:"hosts"`
	// An ordered list of route rules for HTTP traffic.
	Http []VirtualServiceSpecHttp `pulumi:"http"`
	// An ordered list of route rules for opaque TCP traffic.
	Tcp []VirtualServiceSpecTcp `pulumi:"tcp"`
	Tls []VirtualServiceSpecTls `pulumi:"tls"`
}

// VirtualServiceSpecInput is an input type that accepts VirtualServiceSpecArgs and VirtualServiceSpecOutput values.
// You can construct a concrete instance of `VirtualServiceSpecInput` via:
//
//          VirtualServiceSpecArgs{...}
type VirtualServiceSpecInput interface {
	pulumi.Input

	ToVirtualServiceSpecOutput() VirtualServiceSpecOutput
	ToVirtualServiceSpecOutputWithContext(context.Context) VirtualServiceSpecOutput
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpecArgs struct {
	// A list of namespaces to which this virtual service is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The names of gateways and sidecars that should apply these routes.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// The destination hosts to which traffic is being sent.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// An ordered list of route rules for HTTP traffic.
	Http VirtualServiceSpecHttpArrayInput `pulumi:"http"`
	// An ordered list of route rules for opaque TCP traffic.
	Tcp VirtualServiceSpecTcpArrayInput `pulumi:"tcp"`
	Tls VirtualServiceSpecTlsArrayInput `pulumi:"tls"`
}

func (VirtualServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return i.ToVirtualServiceSpecOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput)
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput).ToVirtualServiceSpecPtrOutputWithContext(ctx)
}

// VirtualServiceSpecPtrInput is an input type that accepts VirtualServiceSpecArgs, VirtualServiceSpecPtr and VirtualServiceSpecPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecPtrInput` via:
//
//          VirtualServiceSpecArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput
	ToVirtualServiceSpecPtrOutputWithContext(context.Context) VirtualServiceSpecPtrOutput
}

type virtualServiceSpecPtrType VirtualServiceSpecArgs

func VirtualServiceSpecPtr(v *VirtualServiceSpecArgs) VirtualServiceSpecPtrInput {
	return (*virtualServiceSpecPtrType)(v)
}

func (*virtualServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecPtrOutput)
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpecOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpec) *VirtualServiceSpec {
		return &v
	}).(VirtualServiceSpecPtrOutput)
}

// A list of namespaces to which this virtual service is exported.
func (o VirtualServiceSpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The names of gateways and sidecars that should apply these routes.
func (o VirtualServiceSpecOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// The destination hosts to which traffic is being sent.
func (o VirtualServiceSpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// An ordered list of route rules for HTTP traffic.
func (o VirtualServiceSpecOutput) Http() VirtualServiceSpecHttpArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecHttp { return v.Http }).(VirtualServiceSpecHttpArrayOutput)
}

// An ordered list of route rules for opaque TCP traffic.
func (o VirtualServiceSpecOutput) Tcp() VirtualServiceSpecTcpArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecTcp { return v.Tcp }).(VirtualServiceSpecTcpArrayOutput)
}

func (o VirtualServiceSpecOutput) Tls() VirtualServiceSpecTlsArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecTls { return v.Tls }).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) Elem() VirtualServiceSpecOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) VirtualServiceSpec {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpec
		return ret
	}).(VirtualServiceSpecOutput)
}

// A list of namespaces to which this virtual service is exported.
func (o VirtualServiceSpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The names of gateways and sidecars that should apply these routes.
func (o VirtualServiceSpecPtrOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Gateways
	}).(pulumi.StringArrayOutput)
}

// The destination hosts to which traffic is being sent.
func (o VirtualServiceSpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// An ordered list of route rules for HTTP traffic.
func (o VirtualServiceSpecPtrOutput) Http() VirtualServiceSpecHttpArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(VirtualServiceSpecHttpArrayOutput)
}

// An ordered list of route rules for opaque TCP traffic.
func (o VirtualServiceSpecPtrOutput) Tcp() VirtualServiceSpecTcpArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(VirtualServiceSpecTcpArrayOutput)
}

func (o VirtualServiceSpecPtrOutput) Tls() VirtualServiceSpecTlsArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecHttp struct {
	// Cross-Origin Resource Sharing policy (CORS).
	CorsPolicy *VirtualServiceSpecHttpCorspolicy `pulumi:"corsPolicy"`
	Delegate   *VirtualServiceSpecHttpDelegate   `pulumi:"delegate"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	Fault   *VirtualServiceSpecHttpFault   `pulumi:"fault"`
	Headers *VirtualServiceSpecHttpHeaders `pulumi:"headers"`
	Match   []VirtualServiceSpecHttpMatch  `pulumi:"match"`
	Mirror  *VirtualServiceSpecHttpMirror  `pulumi:"mirror"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercent *int `pulumi:"mirrorPercent"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercentage *VirtualServiceSpecHttpMirrorpercentage `pulumi:"mirrorPercentage"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	Mirror_percent *int `pulumi:"mirror_percent"`
	// The name assigned to the route for debugging purposes.
	Name *string `pulumi:"name"`
	// A HTTP rule can either redirect or forward (default) traffic.
	Redirect interface{} `pulumi:"redirect"`
	// Retry policy for HTTP requests.
	Retries *VirtualServiceSpecHttpRetries `pulumi:"retries"`
	// Rewrite HTTP URIs and Authority headers.
	Rewrite *VirtualServiceSpecHttpRewrite `pulumi:"rewrite"`
	// A HTTP rule can either redirect or forward (default) traffic.
	Route []VirtualServiceSpecHttpRoute `pulumi:"route"`
	// Timeout for HTTP requests, default is disabled.
	Timeout *string `pulumi:"timeout"`
}

// VirtualServiceSpecHttpInput is an input type that accepts VirtualServiceSpecHttpArgs and VirtualServiceSpecHttpOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpInput` via:
//
//          VirtualServiceSpecHttpArgs{...}
type VirtualServiceSpecHttpInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput
	ToVirtualServiceSpecHttpOutputWithContext(context.Context) VirtualServiceSpecHttpOutput
}

type VirtualServiceSpecHttpArgs struct {
	// Cross-Origin Resource Sharing policy (CORS).
	CorsPolicy VirtualServiceSpecHttpCorspolicyPtrInput `pulumi:"corsPolicy"`
	Delegate   VirtualServiceSpecHttpDelegatePtrInput   `pulumi:"delegate"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	Fault   VirtualServiceSpecHttpFaultPtrInput   `pulumi:"fault"`
	Headers VirtualServiceSpecHttpHeadersPtrInput `pulumi:"headers"`
	Match   VirtualServiceSpecHttpMatchArrayInput `pulumi:"match"`
	Mirror  VirtualServiceSpecHttpMirrorPtrInput  `pulumi:"mirror"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercent pulumi.IntPtrInput `pulumi:"mirrorPercent"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercentage VirtualServiceSpecHttpMirrorpercentagePtrInput `pulumi:"mirrorPercentage"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	Mirror_percent pulumi.IntPtrInput `pulumi:"mirror_percent"`
	// The name assigned to the route for debugging purposes.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A HTTP rule can either redirect or forward (default) traffic.
	Redirect pulumi.Input `pulumi:"redirect"`
	// Retry policy for HTTP requests.
	Retries VirtualServiceSpecHttpRetriesPtrInput `pulumi:"retries"`
	// Rewrite HTTP URIs and Authority headers.
	Rewrite VirtualServiceSpecHttpRewritePtrInput `pulumi:"rewrite"`
	// A HTTP rule can either redirect or forward (default) traffic.
	Route VirtualServiceSpecHttpRouteArrayInput `pulumi:"route"`
	// Timeout for HTTP requests, default is disabled.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (VirtualServiceSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttp)(nil)).Elem()
}

func (i VirtualServiceSpecHttpArgs) ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput {
	return i.ToVirtualServiceSpecHttpOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpArgs) ToVirtualServiceSpecHttpOutputWithContext(ctx context.Context) VirtualServiceSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpOutput)
}

// VirtualServiceSpecHttpArrayInput is an input type that accepts VirtualServiceSpecHttpArray and VirtualServiceSpecHttpArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpArrayInput` via:
//
//          VirtualServiceSpecHttpArray{ VirtualServiceSpecHttpArgs{...} }
type VirtualServiceSpecHttpArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput
	ToVirtualServiceSpecHttpArrayOutputWithContext(context.Context) VirtualServiceSpecHttpArrayOutput
}

type VirtualServiceSpecHttpArray []VirtualServiceSpecHttpInput

func (VirtualServiceSpecHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttp)(nil)).Elem()
}

func (i VirtualServiceSpecHttpArray) ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput {
	return i.ToVirtualServiceSpecHttpArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpArray) ToVirtualServiceSpecHttpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpArrayOutput)
}

type VirtualServiceSpecHttpOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttp)(nil)).Elem()
}

func (o VirtualServiceSpecHttpOutput) ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput {
	return o
}

func (o VirtualServiceSpecHttpOutput) ToVirtualServiceSpecHttpOutputWithContext(ctx context.Context) VirtualServiceSpecHttpOutput {
	return o
}

// Cross-Origin Resource Sharing policy (CORS).
func (o VirtualServiceSpecHttpOutput) CorsPolicy() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpCorspolicy { return v.CorsPolicy }).(VirtualServiceSpecHttpCorspolicyPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Delegate() VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpDelegate { return v.Delegate }).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
func (o VirtualServiceSpecHttpOutput) Fault() VirtualServiceSpecHttpFaultPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpFault { return v.Fault }).(VirtualServiceSpecHttpFaultPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Headers() VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpHeaders { return v.Headers }).(VirtualServiceSpecHttpHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Match() VirtualServiceSpecHttpMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpMatch { return v.Match }).(VirtualServiceSpecHttpMatchArrayOutput)
}

func (o VirtualServiceSpecHttpOutput) Mirror() VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpMirror { return v.Mirror }).(VirtualServiceSpecHttpMirrorPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) MirrorPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *int { return v.MirrorPercent }).(pulumi.IntPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) MirrorPercentage() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpMirrorpercentage { return v.MirrorPercentage }).(VirtualServiceSpecHttpMirrorpercentagePtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) Mirror_percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *int { return v.Mirror_percent }).(pulumi.IntPtrOutput)
}

// The name assigned to the route for debugging purposes.
func (o VirtualServiceSpecHttpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A HTTP rule can either redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) Redirect() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) interface{} { return v.Redirect }).(pulumi.AnyOutput)
}

// Retry policy for HTTP requests.
func (o VirtualServiceSpecHttpOutput) Retries() VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpRetries { return v.Retries }).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
func (o VirtualServiceSpecHttpOutput) Rewrite() VirtualServiceSpecHttpRewritePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpRewrite { return v.Rewrite }).(VirtualServiceSpecHttpRewritePtrOutput)
}

// A HTTP rule can either redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) Route() VirtualServiceSpecHttpRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpRoute { return v.Route }).(VirtualServiceSpecHttpRouteArrayOutput)
}

// Timeout for HTTP requests, default is disabled.
func (o VirtualServiceSpecHttpOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttp)(nil)).Elem()
}

func (o VirtualServiceSpecHttpArrayOutput) ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpArrayOutput) ToVirtualServiceSpecHttpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttp {
		return vs[0].([]VirtualServiceSpecHttp)[vs[1].(int)]
	}).(VirtualServiceSpecHttpOutput)
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorspolicy struct {
	AllowCredentials *bool    `pulumi:"allowCredentials"`
	AllowHeaders     []string `pulumi:"allowHeaders"`
	// List of HTTP methods allowed to access the resource.
	AllowMethods []string `pulumi:"allowMethods"`
	// The list of origins that are allowed to perform CORS requests.
	AllowOrigin []string `pulumi:"allowOrigin"`
	// String patterns that match allowed origins.
	AllowOrigins  []interface{} `pulumi:"allowOrigins"`
	ExposeHeaders []string      `pulumi:"exposeHeaders"`
	MaxAge        *string       `pulumi:"maxAge"`
}

// VirtualServiceSpecHttpCorspolicyInput is an input type that accepts VirtualServiceSpecHttpCorspolicyArgs and VirtualServiceSpecHttpCorspolicyOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpCorspolicyInput` via:
//
//          VirtualServiceSpecHttpCorspolicyArgs{...}
type VirtualServiceSpecHttpCorspolicyInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpCorspolicyOutput() VirtualServiceSpecHttpCorspolicyOutput
	ToVirtualServiceSpecHttpCorspolicyOutputWithContext(context.Context) VirtualServiceSpecHttpCorspolicyOutput
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorspolicyArgs struct {
	AllowCredentials pulumi.BoolPtrInput     `pulumi:"allowCredentials"`
	AllowHeaders     pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// List of HTTP methods allowed to access the resource.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// The list of origins that are allowed to perform CORS requests.
	AllowOrigin pulumi.StringArrayInput `pulumi:"allowOrigin"`
	// String patterns that match allowed origins.
	AllowOrigins  pulumi.ArrayInput       `pulumi:"allowOrigins"`
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	MaxAge        pulumi.StringPtrInput   `pulumi:"maxAge"`
}

func (VirtualServiceSpecHttpCorspolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyOutput() VirtualServiceSpecHttpCorspolicyOutput {
	return i.ToVirtualServiceSpecHttpCorspolicyOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorspolicyOutput)
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return i.ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpCorspolicyArgs) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorspolicyOutput).ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpCorspolicyPtrInput is an input type that accepts VirtualServiceSpecHttpCorspolicyArgs, VirtualServiceSpecHttpCorspolicyPtr and VirtualServiceSpecHttpCorspolicyPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpCorspolicyPtrInput` via:
//
//          VirtualServiceSpecHttpCorspolicyArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpCorspolicyPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput
	ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput
}

type virtualServiceSpecHttpCorspolicyPtrType VirtualServiceSpecHttpCorspolicyArgs

func VirtualServiceSpecHttpCorspolicyPtr(v *VirtualServiceSpecHttpCorspolicyArgs) VirtualServiceSpecHttpCorspolicyPtrInput {
	return (*virtualServiceSpecHttpCorspolicyPtrType)(v)
}

func (*virtualServiceSpecHttpCorspolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (i *virtualServiceSpecHttpCorspolicyPtrType) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return i.ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpCorspolicyPtrType) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorspolicyPtrOutput)
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorspolicyOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpCorspolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyOutput() VirtualServiceSpecHttpCorspolicyOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o.ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpCorspolicy) *VirtualServiceSpecHttpCorspolicy {
		return &v
	}).(VirtualServiceSpecHttpCorspolicyPtrOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// List of HTTP methods allowed to access the resource.
func (o VirtualServiceSpecHttpCorspolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// The list of origins that are allowed to perform CORS requests.
func (o VirtualServiceSpecHttpCorspolicyOutput) AllowOrigin() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.AllowOrigin }).(pulumi.StringArrayOutput)
}

// String patterns that match allowed origins.
func (o VirtualServiceSpecHttpCorspolicyOutput) AllowOrigins() pulumi.ArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []interface{} { return v.AllowOrigins }).(pulumi.ArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorspolicy) *string { return v.MaxAge }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpCorspolicyPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpCorspolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpCorspolicy)(nil)).Elem()
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutput() VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) ToVirtualServiceSpecHttpCorspolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorspolicyPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) Elem() VirtualServiceSpecHttpCorspolicyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) VirtualServiceSpecHttpCorspolicy {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpCorspolicy
		return ret
	}).(VirtualServiceSpecHttpCorspolicyOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// List of HTTP methods allowed to access the resource.
func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// The list of origins that are allowed to perform CORS requests.
func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowOrigin() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigin
	}).(pulumi.StringArrayOutput)
}

// String patterns that match allowed origins.
func (o VirtualServiceSpecHttpCorspolicyPtrOutput) AllowOrigins() pulumi.ArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []interface{} {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.ArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpCorspolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorspolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpDelegate struct {
	// Name specifies the name of the delegate VirtualService.
	Name *string `pulumi:"name"`
	// Namespace specifies the namespace where the delegate VirtualService resides.
	Namespace *string `pulumi:"namespace"`
}

// VirtualServiceSpecHttpDelegateInput is an input type that accepts VirtualServiceSpecHttpDelegateArgs and VirtualServiceSpecHttpDelegateOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDelegateInput` via:
//
//          VirtualServiceSpecHttpDelegateArgs{...}
type VirtualServiceSpecHttpDelegateInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput
	ToVirtualServiceSpecHttpDelegateOutputWithContext(context.Context) VirtualServiceSpecHttpDelegateOutput
}

type VirtualServiceSpecHttpDelegateArgs struct {
	// Name specifies the name of the delegate VirtualService.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace specifies the namespace where the delegate VirtualService resides.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VirtualServiceSpecHttpDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput {
	return i.ToVirtualServiceSpecHttpDelegateOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegateOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegateOutput)
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return i.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegateOutput).ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpDelegatePtrInput is an input type that accepts VirtualServiceSpecHttpDelegateArgs, VirtualServiceSpecHttpDelegatePtr and VirtualServiceSpecHttpDelegatePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDelegatePtrInput` via:
//
//          VirtualServiceSpecHttpDelegateArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpDelegatePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput
	ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Context) VirtualServiceSpecHttpDelegatePtrOutput
}

type virtualServiceSpecHttpDelegatePtrType VirtualServiceSpecHttpDelegateArgs

func VirtualServiceSpecHttpDelegatePtr(v *VirtualServiceSpecHttpDelegateArgs) VirtualServiceSpecHttpDelegatePtrInput {
	return (*virtualServiceSpecHttpDelegatePtrType)(v)
}

func (*virtualServiceSpecHttpDelegatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (i *virtualServiceSpecHttpDelegatePtrType) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return i.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpDelegatePtrType) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegatePtrOutput)
}

type VirtualServiceSpecHttpDelegateOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegateOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegateOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpDelegate) *VirtualServiceSpecHttpDelegate {
		return &v
	}).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// Name specifies the name of the delegate VirtualService.
func (o VirtualServiceSpecHttpDelegateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDelegate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace specifies the namespace where the delegate VirtualService resides.
func (o VirtualServiceSpecHttpDelegateOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDelegate) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpDelegatePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDelegatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) Elem() VirtualServiceSpecHttpDelegateOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) VirtualServiceSpecHttpDelegate {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpDelegate
		return ret
	}).(VirtualServiceSpecHttpDelegateOutput)
}

// Name specifies the name of the delegate VirtualService.
func (o VirtualServiceSpecHttpDelegatePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace specifies the namespace where the delegate VirtualService resides.
func (o VirtualServiceSpecHttpDelegatePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFault struct {
	Abort interface{} `pulumi:"abort"`
	Delay interface{} `pulumi:"delay"`
}

// VirtualServiceSpecHttpFaultInput is an input type that accepts VirtualServiceSpecHttpFaultArgs and VirtualServiceSpecHttpFaultOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpFaultInput` via:
//
//          VirtualServiceSpecHttpFaultArgs{...}
type VirtualServiceSpecHttpFaultInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput
	ToVirtualServiceSpecHttpFaultOutputWithContext(context.Context) VirtualServiceSpecHttpFaultOutput
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFaultArgs struct {
	Abort pulumi.Input `pulumi:"abort"`
	Delay pulumi.Input `pulumi:"delay"`
}

func (VirtualServiceSpecHttpFaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput {
	return i.ToVirtualServiceSpecHttpFaultOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultOutput)
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return i.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultOutput).ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpFaultPtrInput is an input type that accepts VirtualServiceSpecHttpFaultArgs, VirtualServiceSpecHttpFaultPtr and VirtualServiceSpecHttpFaultPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpFaultPtrInput` via:
//
//          VirtualServiceSpecHttpFaultArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpFaultPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput
	ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Context) VirtualServiceSpecHttpFaultPtrOutput
}

type virtualServiceSpecHttpFaultPtrType VirtualServiceSpecHttpFaultArgs

func VirtualServiceSpecHttpFaultPtr(v *VirtualServiceSpecHttpFaultArgs) VirtualServiceSpecHttpFaultPtrInput {
	return (*virtualServiceSpecHttpFaultPtrType)(v)
}

func (*virtualServiceSpecHttpFaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (i *virtualServiceSpecHttpFaultPtrType) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return i.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpFaultPtrType) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultPtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFaultOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpFaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return o.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpFault) *VirtualServiceSpecHttpFault {
		return &v
	}).(VirtualServiceSpecHttpFaultPtrOutput)
}

func (o VirtualServiceSpecHttpFaultOutput) Abort() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpFault) interface{} { return v.Abort }).(pulumi.AnyOutput)
}

func (o VirtualServiceSpecHttpFaultOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpFault) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

type VirtualServiceSpecHttpFaultPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpFaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (o VirtualServiceSpecHttpFaultPtrOutput) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultPtrOutput) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Elem() VirtualServiceSpecHttpFaultOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) VirtualServiceSpecHttpFault {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpFault
		return ret
	}).(VirtualServiceSpecHttpFaultOutput)
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Abort() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) interface{} {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(pulumi.AnyOutput)
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) interface{} {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.AnyOutput)
}

type VirtualServiceSpecHttpHeaders struct {
	Request  *VirtualServiceSpecHttpHeadersRequest  `pulumi:"request"`
	Response *VirtualServiceSpecHttpHeadersResponse `pulumi:"response"`
}

// VirtualServiceSpecHttpHeadersInput is an input type that accepts VirtualServiceSpecHttpHeadersArgs and VirtualServiceSpecHttpHeadersOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersInput` via:
//
//          VirtualServiceSpecHttpHeadersArgs{...}
type VirtualServiceSpecHttpHeadersInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput
	ToVirtualServiceSpecHttpHeadersOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersOutput
}

type VirtualServiceSpecHttpHeadersArgs struct {
	Request  VirtualServiceSpecHttpHeadersRequestPtrInput  `pulumi:"request"`
	Response VirtualServiceSpecHttpHeadersResponsePtrInput `pulumi:"response"`
}

func (VirtualServiceSpecHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput {
	return i.ToVirtualServiceSpecHttpHeadersOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersOutput)
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersOutput).ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersPtrInput is an input type that accepts VirtualServiceSpecHttpHeadersArgs, VirtualServiceSpecHttpHeadersPtr and VirtualServiceSpecHttpHeadersPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersPtrInput` via:
//
//          VirtualServiceSpecHttpHeadersArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpHeadersPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput
	ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersPtrOutput
}

type virtualServiceSpecHttpHeadersPtrType VirtualServiceSpecHttpHeadersArgs

func VirtualServiceSpecHttpHeadersPtr(v *VirtualServiceSpecHttpHeadersArgs) VirtualServiceSpecHttpHeadersPtrInput {
	return (*virtualServiceSpecHttpHeadersPtrType)(v)
}

func (*virtualServiceSpecHttpHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersPtrType) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersPtrType) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersPtrOutput)
}

type VirtualServiceSpecHttpHeadersOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeaders {
		return &v
	}).(VirtualServiceSpecHttpHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersOutput) Request() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersRequest { return v.Request }).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersOutput) Response() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersResponse { return v.Response }).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Elem() VirtualServiceSpecHttpHeadersOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) VirtualServiceSpecHttpHeaders {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeaders
		return ret
	}).(VirtualServiceSpecHttpHeadersOutput)
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Request() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersRequest {
		if v == nil {
			return nil
		}
		return v.Request
	}).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Response() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersRequest struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpHeadersRequestInput is an input type that accepts VirtualServiceSpecHttpHeadersRequestArgs and VirtualServiceSpecHttpHeadersRequestOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersRequestInput` via:
//
//          VirtualServiceSpecHttpHeadersRequestArgs{...}
type VirtualServiceSpecHttpHeadersRequestInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput
	ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersRequestOutput
}

type VirtualServiceSpecHttpHeadersRequestArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpHeadersRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestOutput)
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestOutput).ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersRequestPtrInput is an input type that accepts VirtualServiceSpecHttpHeadersRequestArgs, VirtualServiceSpecHttpHeadersRequestPtr and VirtualServiceSpecHttpHeadersRequestPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersRequestPtrInput` via:
//
//          VirtualServiceSpecHttpHeadersRequestArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpHeadersRequestPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput
	ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput
}

type virtualServiceSpecHttpHeadersRequestPtrType VirtualServiceSpecHttpHeadersRequestArgs

func VirtualServiceSpecHttpHeadersRequestPtr(v *VirtualServiceSpecHttpHeadersRequestArgs) VirtualServiceSpecHttpHeadersRequestPtrInput {
	return (*virtualServiceSpecHttpHeadersRequestPtrType)(v)
}

func (*virtualServiceSpecHttpHeadersRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersRequestPtrType) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersRequestPtrType) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

type VirtualServiceSpecHttpHeadersRequestOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeadersRequest) *VirtualServiceSpecHttpHeadersRequest {
		return &v
	}).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersRequestPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Elem() VirtualServiceSpecHttpHeadersRequestOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) VirtualServiceSpecHttpHeadersRequest {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeadersRequest
		return ret
	}).(VirtualServiceSpecHttpHeadersRequestOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersRequestAdd struct {
}

type VirtualServiceSpecHttpHeadersRequestSet struct {
}

type VirtualServiceSpecHttpHeadersResponse struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpHeadersResponseInput is an input type that accepts VirtualServiceSpecHttpHeadersResponseArgs and VirtualServiceSpecHttpHeadersResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersResponseInput` via:
//
//          VirtualServiceSpecHttpHeadersResponseArgs{...}
type VirtualServiceSpecHttpHeadersResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput
	ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersResponseOutput
}

type VirtualServiceSpecHttpHeadersResponseArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpHeadersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponseOutput)
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponseOutput).ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersResponsePtrInput is an input type that accepts VirtualServiceSpecHttpHeadersResponseArgs, VirtualServiceSpecHttpHeadersResponsePtr and VirtualServiceSpecHttpHeadersResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersResponsePtrInput` via:
//
//          VirtualServiceSpecHttpHeadersResponseArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpHeadersResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput
	ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput
}

type virtualServiceSpecHttpHeadersResponsePtrType VirtualServiceSpecHttpHeadersResponseArgs

func VirtualServiceSpecHttpHeadersResponsePtr(v *VirtualServiceSpecHttpHeadersResponseArgs) VirtualServiceSpecHttpHeadersResponsePtrInput {
	return (*virtualServiceSpecHttpHeadersResponsePtrType)(v)
}

func (*virtualServiceSpecHttpHeadersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersResponsePtrType) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersResponsePtrType) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeadersResponse) *VirtualServiceSpecHttpHeadersResponse {
		return &v
	}).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Elem() VirtualServiceSpecHttpHeadersResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) VirtualServiceSpecHttpHeadersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeadersResponse
		return ret
	}).(VirtualServiceSpecHttpHeadersResponseOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersResponseAdd struct {
}

type VirtualServiceSpecHttpHeadersResponseSet struct {
}

type VirtualServiceSpecHttpMatch struct {
	Authority interface{} `pulumi:"authority"`
	// Names of gateways where the rule should be applied.
	Gateways []string               `pulumi:"gateways"`
	Headers  map[string]interface{} `pulumi:"headers"`
	// Flag to specify whether the URI matching should be case-insensitive.
	IgnoreUriCase *bool       `pulumi:"ignoreUriCase"`
	Method        interface{} `pulumi:"method"`
	// The name assigned to a match.
	Name *string `pulumi:"name"`
	// Specifies the ports on the host that is being addressed.
	Port *int `pulumi:"port"`
	// Query parameters for matching.
	QueryParams  map[string]interface{} `pulumi:"queryParams"`
	Scheme       interface{}            `pulumi:"scheme"`
	SourceLabels map[string]string      `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string     `pulumi:"sourceNamespace"`
	Uri             interface{} `pulumi:"uri"`
	// withoutHeader has the same syntax with the header, but has opposite meaning.
	WithoutHeaders map[string]interface{} `pulumi:"withoutHeaders"`
}

// VirtualServiceSpecHttpMatchInput is an input type that accepts VirtualServiceSpecHttpMatchArgs and VirtualServiceSpecHttpMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMatchInput` via:
//
//          VirtualServiceSpecHttpMatchArgs{...}
type VirtualServiceSpecHttpMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput
	ToVirtualServiceSpecHttpMatchOutputWithContext(context.Context) VirtualServiceSpecHttpMatchOutput
}

type VirtualServiceSpecHttpMatchArgs struct {
	Authority pulumi.Input `pulumi:"authority"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	Headers  pulumi.MapInput         `pulumi:"headers"`
	// Flag to specify whether the URI matching should be case-insensitive.
	IgnoreUriCase pulumi.BoolPtrInput `pulumi:"ignoreUriCase"`
	Method        pulumi.Input        `pulumi:"method"`
	// The name assigned to a match.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the ports on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Query parameters for matching.
	QueryParams  pulumi.MapInput       `pulumi:"queryParams"`
	Scheme       pulumi.Input          `pulumi:"scheme"`
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
	Uri             pulumi.Input          `pulumi:"uri"`
	// withoutHeader has the same syntax with the header, but has opposite meaning.
	WithoutHeaders pulumi.MapInput `pulumi:"withoutHeaders"`
}

func (VirtualServiceSpecHttpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMatchArgs) ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput {
	return i.ToVirtualServiceSpecHttpMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMatchArgs) ToVirtualServiceSpecHttpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMatchOutput)
}

// VirtualServiceSpecHttpMatchArrayInput is an input type that accepts VirtualServiceSpecHttpMatchArray and VirtualServiceSpecHttpMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMatchArrayInput` via:
//
//          VirtualServiceSpecHttpMatchArray{ VirtualServiceSpecHttpMatchArgs{...} }
type VirtualServiceSpecHttpMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput
	ToVirtualServiceSpecHttpMatchArrayOutputWithContext(context.Context) VirtualServiceSpecHttpMatchArrayOutput
}

type VirtualServiceSpecHttpMatchArray []VirtualServiceSpecHttpMatchInput

func (VirtualServiceSpecHttpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMatchArray) ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput {
	return i.ToVirtualServiceSpecHttpMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMatchArray) ToVirtualServiceSpecHttpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMatchArrayOutput)
}

type VirtualServiceSpecHttpMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMatchOutput) ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchOutput) ToVirtualServiceSpecHttpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchOutput) Authority() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Authority }).(pulumi.AnyOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecHttpMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

// Flag to specify whether the URI matching should be case-insensitive.
func (o VirtualServiceSpecHttpMatchOutput) IgnoreUriCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *bool { return v.IgnoreUriCase }).(pulumi.BoolPtrOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Method() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Method }).(pulumi.AnyOutput)
}

// The name assigned to a match.
func (o VirtualServiceSpecHttpMatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the ports on the host that is being addressed.
func (o VirtualServiceSpecHttpMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Query parameters for matching.
func (o VirtualServiceSpecHttpMatchOutput) QueryParams() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.QueryParams }).(pulumi.MapOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Scheme() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Scheme }).(pulumi.AnyOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecHttpMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecHttpMatchOutput) Uri() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Uri }).(pulumi.AnyOutput)
}

// withoutHeader has the same syntax with the header, but has opposite meaning.
func (o VirtualServiceSpecHttpMatchOutput) WithoutHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.WithoutHeaders }).(pulumi.MapOutput)
}

type VirtualServiceSpecHttpMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMatchArrayOutput) ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchArrayOutput) ToVirtualServiceSpecHttpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpMatch {
		return vs[0].([]VirtualServiceSpecHttpMatch)[vs[1].(int)]
	}).(VirtualServiceSpecHttpMatchOutput)
}

type VirtualServiceSpecHttpMatchHeaders struct {
}

// Query parameters for matching.
type VirtualServiceSpecHttpMatchQueryparams struct {
}

type VirtualServiceSpecHttpMatchSourcelabels struct {
}

// withoutHeader has the same syntax with the header, but has opposite meaning.
type VirtualServiceSpecHttpMatchWithoutheaders struct {
}

type VirtualServiceSpecHttpMirror struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpMirrorPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpMirrorInput is an input type that accepts VirtualServiceSpecHttpMirrorArgs and VirtualServiceSpecHttpMirrorOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorInput` via:
//
//          VirtualServiceSpecHttpMirrorArgs{...}
type VirtualServiceSpecHttpMirrorInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput
	ToVirtualServiceSpecHttpMirrorOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorOutput
}

type VirtualServiceSpecHttpMirrorArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpMirrorPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput {
	return i.ToVirtualServiceSpecHttpMirrorOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorOutput)
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorOutput).ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorArgs, VirtualServiceSpecHttpMirrorPtr and VirtualServiceSpecHttpMirrorPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPtrInput` via:
//
//          VirtualServiceSpecHttpMirrorArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpMirrorPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput
	ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPtrOutput
}

type virtualServiceSpecHttpMirrorPtrType VirtualServiceSpecHttpMirrorArgs

func VirtualServiceSpecHttpMirrorPtr(v *VirtualServiceSpecHttpMirrorArgs) VirtualServiceSpecHttpMirrorPtrInput {
	return (*virtualServiceSpecHttpMirrorPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPtrType) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPtrType) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPtrOutput)
}

type VirtualServiceSpecHttpMirrorOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirror {
		return &v
	}).(VirtualServiceSpecHttpMirrorPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorOutput) Port() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirrorPort { return v.Port }).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpMirrorPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) Elem() VirtualServiceSpecHttpMirrorOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) VirtualServiceSpecHttpMirror {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirror
		return ret
	}).(VirtualServiceSpecHttpMirrorOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Port() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirrorPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpMirrorPortInput is an input type that accepts VirtualServiceSpecHttpMirrorPortArgs and VirtualServiceSpecHttpMirrorPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPortInput` via:
//
//          VirtualServiceSpecHttpMirrorPortArgs{...}
type VirtualServiceSpecHttpMirrorPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput
	ToVirtualServiceSpecHttpMirrorPortOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpMirrorPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortOutput)
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortOutput).ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPortPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorPortArgs, VirtualServiceSpecHttpMirrorPortPtr and VirtualServiceSpecHttpMirrorPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPortPtrInput` via:
//
//          VirtualServiceSpecHttpMirrorPortArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpMirrorPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput
	ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput
}

type virtualServiceSpecHttpMirrorPortPtrType VirtualServiceSpecHttpMirrorPortArgs

func VirtualServiceSpecHttpMirrorPortPtr(v *VirtualServiceSpecHttpMirrorPortArgs) VirtualServiceSpecHttpMirrorPortPtrInput {
	return (*virtualServiceSpecHttpMirrorPortPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPortPtrType) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPortPtrType) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorPort) *VirtualServiceSpecHttpMirrorPort {
		return &v
	}).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

func (o VirtualServiceSpecHttpMirrorPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpMirrorPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) Elem() VirtualServiceSpecHttpMirrorPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPort) VirtualServiceSpecHttpMirrorPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorPort
		return ret
	}).(VirtualServiceSpecHttpMirrorPortOutput)
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorpercentage struct {
	Value *float64 `pulumi:"value"`
}

// VirtualServiceSpecHttpMirrorpercentageInput is an input type that accepts VirtualServiceSpecHttpMirrorpercentageArgs and VirtualServiceSpecHttpMirrorpercentageOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorpercentageInput` via:
//
//          VirtualServiceSpecHttpMirrorpercentageArgs{...}
type VirtualServiceSpecHttpMirrorpercentageInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorpercentageOutput() VirtualServiceSpecHttpMirrorpercentageOutput
	ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorpercentageOutput
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorpercentageArgs struct {
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (VirtualServiceSpecHttpMirrorpercentageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentageOutput() VirtualServiceSpecHttpMirrorpercentageOutput {
	return i.ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorpercentageOutput)
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorpercentageArgs) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorpercentageOutput).ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorpercentagePtrInput is an input type that accepts VirtualServiceSpecHttpMirrorpercentageArgs, VirtualServiceSpecHttpMirrorpercentagePtr and VirtualServiceSpecHttpMirrorpercentagePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorpercentagePtrInput` via:
//
//          VirtualServiceSpecHttpMirrorpercentageArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpMirrorpercentagePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput
	ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput
}

type virtualServiceSpecHttpMirrorpercentagePtrType VirtualServiceSpecHttpMirrorpercentageArgs

func VirtualServiceSpecHttpMirrorpercentagePtr(v *VirtualServiceSpecHttpMirrorpercentageArgs) VirtualServiceSpecHttpMirrorpercentagePtrInput {
	return (*virtualServiceSpecHttpMirrorpercentagePtrType)(v)
}

func (*virtualServiceSpecHttpMirrorpercentagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorpercentagePtrType) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorpercentagePtrType) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorpercentagePtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorpercentageOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorpercentageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentageOutput() VirtualServiceSpecHttpMirrorpercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorpercentage) *VirtualServiceSpecHttpMirrorpercentage {
		return &v
	}).(VirtualServiceSpecHttpMirrorpercentagePtrOutput)
}

func (o VirtualServiceSpecHttpMirrorpercentageOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorpercentage) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type VirtualServiceSpecHttpMirrorpercentagePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorpercentagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorpercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutput() VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) ToVirtualServiceSpecHttpMirrorpercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorpercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) Elem() VirtualServiceSpecHttpMirrorpercentageOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorpercentage) VirtualServiceSpecHttpMirrorpercentage {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorpercentage
		return ret
	}).(VirtualServiceSpecHttpMirrorpercentageOutput)
}

func (o VirtualServiceSpecHttpMirrorpercentagePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorpercentage) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetries struct {
	// Number of retries to be allowed for a given request.
	Attempts *int `pulumi:"attempts"`
	// Timeout per attempt for a given request, including the initial call and any retries.
	PerTryTimeout *string `pulumi:"perTryTimeout"`
	// Specifies the conditions under which retry takes place.
	RetryOn *string `pulumi:"retryOn"`
	// Flag to specify whether the retries should retry to other localities.
	RetryRemoteLocalities *bool `pulumi:"retryRemoteLocalities"`
}

// VirtualServiceSpecHttpRetriesInput is an input type that accepts VirtualServiceSpecHttpRetriesArgs and VirtualServiceSpecHttpRetriesOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRetriesInput` via:
//
//          VirtualServiceSpecHttpRetriesArgs{...}
type VirtualServiceSpecHttpRetriesInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput
	ToVirtualServiceSpecHttpRetriesOutputWithContext(context.Context) VirtualServiceSpecHttpRetriesOutput
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetriesArgs struct {
	// Number of retries to be allowed for a given request.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
	// Timeout per attempt for a given request, including the initial call and any retries.
	PerTryTimeout pulumi.StringPtrInput `pulumi:"perTryTimeout"`
	// Specifies the conditions under which retry takes place.
	RetryOn pulumi.StringPtrInput `pulumi:"retryOn"`
	// Flag to specify whether the retries should retry to other localities.
	RetryRemoteLocalities pulumi.BoolPtrInput `pulumi:"retryRemoteLocalities"`
}

func (VirtualServiceSpecHttpRetriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput {
	return i.ToVirtualServiceSpecHttpRetriesOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesOutput)
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return i.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesOutput).ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRetriesPtrInput is an input type that accepts VirtualServiceSpecHttpRetriesArgs, VirtualServiceSpecHttpRetriesPtr and VirtualServiceSpecHttpRetriesPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRetriesPtrInput` via:
//
//          VirtualServiceSpecHttpRetriesArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRetriesPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput
	ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRetriesPtrOutput
}

type virtualServiceSpecHttpRetriesPtrType VirtualServiceSpecHttpRetriesArgs

func VirtualServiceSpecHttpRetriesPtr(v *VirtualServiceSpecHttpRetriesArgs) VirtualServiceSpecHttpRetriesPtrInput {
	return (*virtualServiceSpecHttpRetriesPtrType)(v)
}

func (*virtualServiceSpecHttpRetriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRetriesPtrType) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return i.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRetriesPtrType) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetriesOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRetriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRetries) *VirtualServiceSpecHttpRetries {
		return &v
	}).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Number of retries to be allowed for a given request.
func (o VirtualServiceSpecHttpRetriesOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

// Timeout per attempt for a given request, including the initial call and any retries.
func (o VirtualServiceSpecHttpRetriesOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *string { return v.PerTryTimeout }).(pulumi.StringPtrOutput)
}

// Specifies the conditions under which retry takes place.
func (o VirtualServiceSpecHttpRetriesOutput) RetryOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *string { return v.RetryOn }).(pulumi.StringPtrOutput)
}

// Flag to specify whether the retries should retry to other localities.
func (o VirtualServiceSpecHttpRetriesOutput) RetryRemoteLocalities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *bool { return v.RetryRemoteLocalities }).(pulumi.BoolPtrOutput)
}

type VirtualServiceSpecHttpRetriesPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRetriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) Elem() VirtualServiceSpecHttpRetriesOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) VirtualServiceSpecHttpRetries {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRetries
		return ret
	}).(VirtualServiceSpecHttpRetriesOutput)
}

// Number of retries to be allowed for a given request.
func (o VirtualServiceSpecHttpRetriesPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

// Timeout per attempt for a given request, including the initial call and any retries.
func (o VirtualServiceSpecHttpRetriesPtrOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *string {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the conditions under which retry takes place.
func (o VirtualServiceSpecHttpRetriesPtrOutput) RetryOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *string {
		if v == nil {
			return nil
		}
		return v.RetryOn
	}).(pulumi.StringPtrOutput)
}

// Flag to specify whether the retries should retry to other localities.
func (o VirtualServiceSpecHttpRetriesPtrOutput) RetryRemoteLocalities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *bool {
		if v == nil {
			return nil
		}
		return v.RetryRemoteLocalities
	}).(pulumi.BoolPtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewrite struct {
	// rewrite the Authority/Host header with this value.
	Authority *string `pulumi:"authority"`
	Uri       *string `pulumi:"uri"`
}

// VirtualServiceSpecHttpRewriteInput is an input type that accepts VirtualServiceSpecHttpRewriteArgs and VirtualServiceSpecHttpRewriteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewriteInput` via:
//
//          VirtualServiceSpecHttpRewriteArgs{...}
type VirtualServiceSpecHttpRewriteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput
	ToVirtualServiceSpecHttpRewriteOutputWithContext(context.Context) VirtualServiceSpecHttpRewriteOutput
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewriteArgs struct {
	// rewrite the Authority/Host header with this value.
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	Uri       pulumi.StringPtrInput `pulumi:"uri"`
}

func (VirtualServiceSpecHttpRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput {
	return i.ToVirtualServiceSpecHttpRewriteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteOutput)
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteOutput).ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRewritePtrInput is an input type that accepts VirtualServiceSpecHttpRewriteArgs, VirtualServiceSpecHttpRewritePtr and VirtualServiceSpecHttpRewritePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewritePtrInput` via:
//
//          VirtualServiceSpecHttpRewriteArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRewritePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput
	ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRewritePtrOutput
}

type virtualServiceSpecHttpRewritePtrType VirtualServiceSpecHttpRewriteArgs

func VirtualServiceSpecHttpRewritePtr(v *VirtualServiceSpecHttpRewriteArgs) VirtualServiceSpecHttpRewritePtrInput {
	return (*virtualServiceSpecHttpRewritePtrType)(v)
}

func (*virtualServiceSpecHttpRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRewritePtrType) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRewritePtrType) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewritePtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewriteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return o.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRewrite) *VirtualServiceSpecHttpRewrite {
		return &v
	}).(VirtualServiceSpecHttpRewritePtrOutput)
}

// rewrite the Authority/Host header with this value.
func (o VirtualServiceSpecHttpRewriteOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecHttpRewriteOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRewritePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewritePtrOutput) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewritePtrOutput) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewritePtrOutput) Elem() VirtualServiceSpecHttpRewriteOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) VirtualServiceSpecHttpRewrite {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRewrite
		return ret
	}).(VirtualServiceSpecHttpRewriteOutput)
}

// rewrite the Authority/Host header with this value.
func (o VirtualServiceSpecHttpRewritePtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecHttpRewritePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRoute struct {
	Destination *VirtualServiceSpecHttpRouteDestination `pulumi:"destination"`
	Headers     *VirtualServiceSpecHttpRouteHeaders     `pulumi:"headers"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecHttpRouteInput is an input type that accepts VirtualServiceSpecHttpRouteArgs and VirtualServiceSpecHttpRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteInput` via:
//
//          VirtualServiceSpecHttpRouteArgs{...}
type VirtualServiceSpecHttpRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput
	ToVirtualServiceSpecHttpRouteOutputWithContext(context.Context) VirtualServiceSpecHttpRouteOutput
}

type VirtualServiceSpecHttpRouteArgs struct {
	Destination VirtualServiceSpecHttpRouteDestinationPtrInput `pulumi:"destination"`
	Headers     VirtualServiceSpecHttpRouteHeadersPtrInput     `pulumi:"headers"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteArgs) ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput {
	return i.ToVirtualServiceSpecHttpRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteArgs) ToVirtualServiceSpecHttpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteOutput)
}

// VirtualServiceSpecHttpRouteArrayInput is an input type that accepts VirtualServiceSpecHttpRouteArray and VirtualServiceSpecHttpRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteArrayInput` via:
//
//          VirtualServiceSpecHttpRouteArray{ VirtualServiceSpecHttpRouteArgs{...} }
type VirtualServiceSpecHttpRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput
	ToVirtualServiceSpecHttpRouteArrayOutputWithContext(context.Context) VirtualServiceSpecHttpRouteArrayOutput
}

type VirtualServiceSpecHttpRouteArray []VirtualServiceSpecHttpRouteInput

func (VirtualServiceSpecHttpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteArray) ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput {
	return i.ToVirtualServiceSpecHttpRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteArray) ToVirtualServiceSpecHttpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteArrayOutput)
}

type VirtualServiceSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteOutput) ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteOutput) ToVirtualServiceSpecHttpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteOutput) Destination() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *VirtualServiceSpecHttpRouteDestination { return v.Destination }).(VirtualServiceSpecHttpRouteDestinationPtrOutput)
}

func (o VirtualServiceSpecHttpRouteOutput) Headers() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *VirtualServiceSpecHttpRouteHeaders { return v.Headers }).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecHttpRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteArrayOutput) ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteArrayOutput) ToVirtualServiceSpecHttpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpRoute {
		return vs[0].([]VirtualServiceSpecHttpRoute)[vs[1].(int)]
	}).(VirtualServiceSpecHttpRouteOutput)
}

type VirtualServiceSpecHttpRouteDestination struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpRouteDestinationInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationArgs and VirtualServiceSpecHttpRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationInput` via:
//
//          VirtualServiceSpecHttpRouteDestinationArgs{...}
type VirtualServiceSpecHttpRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput
	ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationOutput
}

type VirtualServiceSpecHttpRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationOutput)
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationOutput).ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteDestinationPtrInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationArgs, VirtualServiceSpecHttpRouteDestinationPtr and VirtualServiceSpecHttpRouteDestinationPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPtrInput` via:
//
//          VirtualServiceSpecHttpRouteDestinationArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRouteDestinationPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput
	ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput
}

type virtualServiceSpecHttpRouteDestinationPtrType VirtualServiceSpecHttpRouteDestinationArgs

func VirtualServiceSpecHttpRouteDestinationPtr(v *VirtualServiceSpecHttpRouteDestinationArgs) VirtualServiceSpecHttpRouteDestinationPtrInput {
	return (*virtualServiceSpecHttpRouteDestinationPtrType)(v)
}

func (*virtualServiceSpecHttpRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteDestinationPtrType) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteDestinationPtrType) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestination {
		return &v
	}).(VirtualServiceSpecHttpRouteDestinationPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Port() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutput() VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Elem() VirtualServiceSpecHttpRouteDestinationOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) VirtualServiceSpecHttpRouteDestination {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteDestination
		return ret
	}).(VirtualServiceSpecHttpRouteDestinationOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Port() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestinationPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpRouteDestinationPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpRouteDestinationPortInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationPortArgs and VirtualServiceSpecHttpRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPortInput` via:
//
//          VirtualServiceSpecHttpRouteDestinationPortArgs{...}
type VirtualServiceSpecHttpRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput
	ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortOutput)
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortOutput).ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationPortArgs, VirtualServiceSpecHttpRouteDestinationPortPtr and VirtualServiceSpecHttpRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPortPtrInput` via:
//
//          VirtualServiceSpecHttpRouteDestinationPortArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput
	ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput
}

type virtualServiceSpecHttpRouteDestinationPortPtrType VirtualServiceSpecHttpRouteDestinationPortArgs

func VirtualServiceSpecHttpRouteDestinationPortPtr(v *VirtualServiceSpecHttpRouteDestinationPortArgs) VirtualServiceSpecHttpRouteDestinationPortPtrInput {
	return (*virtualServiceSpecHttpRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecHttpRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteDestinationPortPtrType) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteDestinationPortPtrType) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteDestinationPort) *VirtualServiceSpecHttpRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestinationPort) VirtualServiceSpecHttpRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteDestinationPort
		return ret
	}).(VirtualServiceSpecHttpRouteDestinationPortOutput)
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteHeaders struct {
	Request  *VirtualServiceSpecHttpRouteHeadersRequest  `pulumi:"request"`
	Response *VirtualServiceSpecHttpRouteHeadersResponse `pulumi:"response"`
}

// VirtualServiceSpecHttpRouteHeadersInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersArgs and VirtualServiceSpecHttpRouteHeadersOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersInput` via:
//
//          VirtualServiceSpecHttpRouteHeadersArgs{...}
type VirtualServiceSpecHttpRouteHeadersInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput
	ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersOutput
}

type VirtualServiceSpecHttpRouteHeadersArgs struct {
	Request  VirtualServiceSpecHttpRouteHeadersRequestPtrInput  `pulumi:"request"`
	Response VirtualServiceSpecHttpRouteHeadersResponsePtrInput `pulumi:"response"`
}

func (VirtualServiceSpecHttpRouteHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersOutput).ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersPtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersArgs, VirtualServiceSpecHttpRouteHeadersPtr and VirtualServiceSpecHttpRouteHeadersPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersPtrInput` via:
//
//          VirtualServiceSpecHttpRouteHeadersArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRouteHeadersPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput
	ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput
}

type virtualServiceSpecHttpRouteHeadersPtrType VirtualServiceSpecHttpRouteHeadersArgs

func VirtualServiceSpecHttpRouteHeadersPtr(v *VirtualServiceSpecHttpRouteHeadersArgs) VirtualServiceSpecHttpRouteHeadersPtrInput {
	return (*virtualServiceSpecHttpRouteHeadersPtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersPtrType) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersPtrType) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeaders {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) Request() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersRequest {
		return v.Request
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) Response() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersResponse {
		return v.Response
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) VirtualServiceSpecHttpRouteHeaders {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeaders
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Request() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersRequest {
		if v == nil {
			return nil
		}
		return v.Request
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Response() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequest struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpRouteHeadersRequestInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersRequestArgs and VirtualServiceSpecHttpRouteHeadersRequestOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersRequestInput` via:
//
//          VirtualServiceSpecHttpRouteHeadersRequestArgs{...}
type VirtualServiceSpecHttpRouteHeadersRequestInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput
	ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput
}

type VirtualServiceSpecHttpRouteHeadersRequestArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpRouteHeadersRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestOutput).ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersRequestPtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersRequestArgs, VirtualServiceSpecHttpRouteHeadersRequestPtr and VirtualServiceSpecHttpRouteHeadersRequestPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersRequestPtrInput` via:
//
//          VirtualServiceSpecHttpRouteHeadersRequestArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRouteHeadersRequestPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput
	ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput
}

type virtualServiceSpecHttpRouteHeadersRequestPtrType VirtualServiceSpecHttpRouteHeadersRequestArgs

func VirtualServiceSpecHttpRouteHeadersRequestPtr(v *VirtualServiceSpecHttpRouteHeadersRequestArgs) VirtualServiceSpecHttpRouteHeadersRequestPtrInput {
	return (*virtualServiceSpecHttpRouteHeadersRequestPtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersRequestPtrType) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersRequestPtrType) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeadersRequest) *VirtualServiceSpecHttpRouteHeadersRequest {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) VirtualServiceSpecHttpRouteHeadersRequest {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeadersRequest
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersRequestOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestAdd struct {
}

type VirtualServiceSpecHttpRouteHeadersRequestSet struct {
}

type VirtualServiceSpecHttpRouteHeadersResponse struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpRouteHeadersResponseInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersResponseArgs and VirtualServiceSpecHttpRouteHeadersResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersResponseInput` via:
//
//          VirtualServiceSpecHttpRouteHeadersResponseArgs{...}
type VirtualServiceSpecHttpRouteHeadersResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput
	ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput
}

type VirtualServiceSpecHttpRouteHeadersResponseArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpRouteHeadersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponseOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponseOutput).ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersResponsePtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersResponseArgs, VirtualServiceSpecHttpRouteHeadersResponsePtr and VirtualServiceSpecHttpRouteHeadersResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersResponsePtrInput` via:
//
//          VirtualServiceSpecHttpRouteHeadersResponseArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecHttpRouteHeadersResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput
	ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput
}

type virtualServiceSpecHttpRouteHeadersResponsePtrType VirtualServiceSpecHttpRouteHeadersResponseArgs

func VirtualServiceSpecHttpRouteHeadersResponsePtr(v *VirtualServiceSpecHttpRouteHeadersResponseArgs) VirtualServiceSpecHttpRouteHeadersResponsePtrInput {
	return (*virtualServiceSpecHttpRouteHeadersResponsePtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersResponsePtrType) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersResponsePtrType) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeadersResponse) *VirtualServiceSpecHttpRouteHeadersResponse {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) VirtualServiceSpecHttpRouteHeadersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeadersResponse
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersResponseOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponseAdd struct {
}

type VirtualServiceSpecHttpRouteHeadersResponseSet struct {
}

type VirtualServiceSpecTcp struct {
	Match []VirtualServiceSpecTcpMatch `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route []VirtualServiceSpecTcpRoute `pulumi:"route"`
}

// VirtualServiceSpecTcpInput is an input type that accepts VirtualServiceSpecTcpArgs and VirtualServiceSpecTcpOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpInput` via:
//
//          VirtualServiceSpecTcpArgs{...}
type VirtualServiceSpecTcpInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput
	ToVirtualServiceSpecTcpOutputWithContext(context.Context) VirtualServiceSpecTcpOutput
}

type VirtualServiceSpecTcpArgs struct {
	Match VirtualServiceSpecTcpMatchArrayInput `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route VirtualServiceSpecTcpRouteArrayInput `pulumi:"route"`
}

func (VirtualServiceSpecTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcp)(nil)).Elem()
}

func (i VirtualServiceSpecTcpArgs) ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput {
	return i.ToVirtualServiceSpecTcpOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpArgs) ToVirtualServiceSpecTcpOutputWithContext(ctx context.Context) VirtualServiceSpecTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpOutput)
}

// VirtualServiceSpecTcpArrayInput is an input type that accepts VirtualServiceSpecTcpArray and VirtualServiceSpecTcpArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpArrayInput` via:
//
//          VirtualServiceSpecTcpArray{ VirtualServiceSpecTcpArgs{...} }
type VirtualServiceSpecTcpArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput
	ToVirtualServiceSpecTcpArrayOutputWithContext(context.Context) VirtualServiceSpecTcpArrayOutput
}

type VirtualServiceSpecTcpArray []VirtualServiceSpecTcpInput

func (VirtualServiceSpecTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcp)(nil)).Elem()
}

func (i VirtualServiceSpecTcpArray) ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput {
	return i.ToVirtualServiceSpecTcpArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpArray) ToVirtualServiceSpecTcpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpArrayOutput)
}

type VirtualServiceSpecTcpOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcp)(nil)).Elem()
}

func (o VirtualServiceSpecTcpOutput) ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput {
	return o
}

func (o VirtualServiceSpecTcpOutput) ToVirtualServiceSpecTcpOutputWithContext(ctx context.Context) VirtualServiceSpecTcpOutput {
	return o
}

func (o VirtualServiceSpecTcpOutput) Match() VirtualServiceSpecTcpMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcp) []VirtualServiceSpecTcpMatch { return v.Match }).(VirtualServiceSpecTcpMatchArrayOutput)
}

// The destination to which the connection should be forwarded to.
func (o VirtualServiceSpecTcpOutput) Route() VirtualServiceSpecTcpRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcp) []VirtualServiceSpecTcpRoute { return v.Route }).(VirtualServiceSpecTcpRouteArrayOutput)
}

type VirtualServiceSpecTcpArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcp)(nil)).Elem()
}

func (o VirtualServiceSpecTcpArrayOutput) ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpArrayOutput) ToVirtualServiceSpecTcpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcp {
		return vs[0].([]VirtualServiceSpecTcp)[vs[1].(int)]
	}).(VirtualServiceSpecTcpOutput)
}

type VirtualServiceSpecTcpMatch struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets []string `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port         *int              `pulumi:"port"`
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
	// IPv4 or IPv6 ip address of source with optional subnet.
	SourceSubnet *string `pulumi:"sourceSubnet"`
}

// VirtualServiceSpecTcpMatchInput is an input type that accepts VirtualServiceSpecTcpMatchArgs and VirtualServiceSpecTcpMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpMatchInput` via:
//
//          VirtualServiceSpecTcpMatchArgs{...}
type VirtualServiceSpecTcpMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput
	ToVirtualServiceSpecTcpMatchOutputWithContext(context.Context) VirtualServiceSpecTcpMatchOutput
}

type VirtualServiceSpecTcpMatchArgs struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets pulumi.StringArrayInput `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port         pulumi.IntPtrInput    `pulumi:"port"`
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
	// IPv4 or IPv6 ip address of source with optional subnet.
	SourceSubnet pulumi.StringPtrInput `pulumi:"sourceSubnet"`
}

func (VirtualServiceSpecTcpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTcpMatchArgs) ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput {
	return i.ToVirtualServiceSpecTcpMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpMatchArgs) ToVirtualServiceSpecTcpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpMatchOutput)
}

// VirtualServiceSpecTcpMatchArrayInput is an input type that accepts VirtualServiceSpecTcpMatchArray and VirtualServiceSpecTcpMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpMatchArrayInput` via:
//
//          VirtualServiceSpecTcpMatchArray{ VirtualServiceSpecTcpMatchArgs{...} }
type VirtualServiceSpecTcpMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput
	ToVirtualServiceSpecTcpMatchArrayOutputWithContext(context.Context) VirtualServiceSpecTcpMatchArrayOutput
}

type VirtualServiceSpecTcpMatchArray []VirtualServiceSpecTcpMatchInput

func (VirtualServiceSpecTcpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTcpMatchArray) ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput {
	return i.ToVirtualServiceSpecTcpMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpMatchArray) ToVirtualServiceSpecTcpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpMatchArrayOutput)
}

type VirtualServiceSpecTcpMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTcpMatchOutput) ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchOutput) ToVirtualServiceSpecTcpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchOutput {
	return o
}

// IPv4 or IPv6 ip addresses of destination with optional subnet.
func (o VirtualServiceSpecTcpMatchOutput) DestinationSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) []string { return v.DestinationSubnets }).(pulumi.StringArrayOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecTcpMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o VirtualServiceSpecTcpMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecTcpMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

// IPv4 or IPv6 ip address of source with optional subnet.
func (o VirtualServiceSpecTcpMatchOutput) SourceSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *string { return v.SourceSubnet }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTcpMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTcpMatchArrayOutput) ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchArrayOutput) ToVirtualServiceSpecTcpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcpMatch {
		return vs[0].([]VirtualServiceSpecTcpMatch)[vs[1].(int)]
	}).(VirtualServiceSpecTcpMatchOutput)
}

type VirtualServiceSpecTcpMatchSourcelabels struct {
}

type VirtualServiceSpecTcpRoute struct {
	Destination *VirtualServiceSpecTcpRouteDestination `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecTcpRouteInput is an input type that accepts VirtualServiceSpecTcpRouteArgs and VirtualServiceSpecTcpRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteInput` via:
//
//          VirtualServiceSpecTcpRouteArgs{...}
type VirtualServiceSpecTcpRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput
	ToVirtualServiceSpecTcpRouteOutputWithContext(context.Context) VirtualServiceSpecTcpRouteOutput
}

type VirtualServiceSpecTcpRouteArgs struct {
	Destination VirtualServiceSpecTcpRouteDestinationPtrInput `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteArgs) ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput {
	return i.ToVirtualServiceSpecTcpRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteArgs) ToVirtualServiceSpecTcpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteOutput)
}

// VirtualServiceSpecTcpRouteArrayInput is an input type that accepts VirtualServiceSpecTcpRouteArray and VirtualServiceSpecTcpRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteArrayInput` via:
//
//          VirtualServiceSpecTcpRouteArray{ VirtualServiceSpecTcpRouteArgs{...} }
type VirtualServiceSpecTcpRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput
	ToVirtualServiceSpecTcpRouteArrayOutputWithContext(context.Context) VirtualServiceSpecTcpRouteArrayOutput
}

type VirtualServiceSpecTcpRouteArray []VirtualServiceSpecTcpRouteInput

func (VirtualServiceSpecTcpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteArray) ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput {
	return i.ToVirtualServiceSpecTcpRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteArray) ToVirtualServiceSpecTcpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteArrayOutput)
}

type VirtualServiceSpecTcpRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteOutput) ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteOutput) ToVirtualServiceSpecTcpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteOutput) Destination() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRoute) *VirtualServiceSpecTcpRouteDestination { return v.Destination }).(VirtualServiceSpecTcpRouteDestinationPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecTcpRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTcpRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteArrayOutput) ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteArrayOutput) ToVirtualServiceSpecTcpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcpRoute {
		return vs[0].([]VirtualServiceSpecTcpRoute)[vs[1].(int)]
	}).(VirtualServiceSpecTcpRouteOutput)
}

type VirtualServiceSpecTcpRouteDestination struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecTcpRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecTcpRouteDestinationInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationArgs and VirtualServiceSpecTcpRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationInput` via:
//
//          VirtualServiceSpecTcpRouteDestinationArgs{...}
type VirtualServiceSpecTcpRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput
	ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationOutput
}

type VirtualServiceSpecTcpRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecTcpRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecTcpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationOutput)
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationOutput).ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTcpRouteDestinationPtrInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationArgs, VirtualServiceSpecTcpRouteDestinationPtr and VirtualServiceSpecTcpRouteDestinationPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPtrInput` via:
//
//          VirtualServiceSpecTcpRouteDestinationArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecTcpRouteDestinationPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput
	ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput
}

type virtualServiceSpecTcpRouteDestinationPtrType VirtualServiceSpecTcpRouteDestinationArgs

func VirtualServiceSpecTcpRouteDestinationPtr(v *VirtualServiceSpecTcpRouteDestinationArgs) VirtualServiceSpecTcpRouteDestinationPtrInput {
	return (*virtualServiceSpecTcpRouteDestinationPtrType)(v)
}

func (*virtualServiceSpecTcpRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (i *virtualServiceSpecTcpRouteDestinationPtrType) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTcpRouteDestinationPtrType) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o.ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestination {
		return &v
	}).(VirtualServiceSpecTcpRouteDestinationPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Port() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutput() VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Elem() VirtualServiceSpecTcpRouteDestinationOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) VirtualServiceSpecTcpRouteDestination {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTcpRouteDestination
		return ret
	}).(VirtualServiceSpecTcpRouteDestinationOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Port() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestinationPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTcpRouteDestinationPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecTcpRouteDestinationPortInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationPortArgs and VirtualServiceSpecTcpRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPortInput` via:
//
//          VirtualServiceSpecTcpRouteDestinationPortArgs{...}
type VirtualServiceSpecTcpRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput
	ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecTcpRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortOutput)
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortOutput).ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTcpRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationPortArgs, VirtualServiceSpecTcpRouteDestinationPortPtr and VirtualServiceSpecTcpRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPortPtrInput` via:
//
//          VirtualServiceSpecTcpRouteDestinationPortArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecTcpRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput
	ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput
}

type virtualServiceSpecTcpRouteDestinationPortPtrType VirtualServiceSpecTcpRouteDestinationPortArgs

func VirtualServiceSpecTcpRouteDestinationPortPtr(v *VirtualServiceSpecTcpRouteDestinationPortArgs) VirtualServiceSpecTcpRouteDestinationPortPtrInput {
	return (*virtualServiceSpecTcpRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecTcpRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecTcpRouteDestinationPortPtrType) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTcpRouteDestinationPortPtrType) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTcpRouteDestinationPort) *VirtualServiceSpecTcpRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestinationPort) VirtualServiceSpecTcpRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTcpRouteDestinationPort
		return ret
	}).(VirtualServiceSpecTcpRouteDestinationPortOutput)
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTls struct {
	Match []VirtualServiceSpecTlsMatch `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route []VirtualServiceSpecTlsRoute `pulumi:"route"`
}

// VirtualServiceSpecTlsInput is an input type that accepts VirtualServiceSpecTlsArgs and VirtualServiceSpecTlsOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsInput` via:
//
//          VirtualServiceSpecTlsArgs{...}
type VirtualServiceSpecTlsInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput
	ToVirtualServiceSpecTlsOutputWithContext(context.Context) VirtualServiceSpecTlsOutput
}

type VirtualServiceSpecTlsArgs struct {
	Match VirtualServiceSpecTlsMatchArrayInput `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route VirtualServiceSpecTlsRouteArrayInput `pulumi:"route"`
}

func (VirtualServiceSpecTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTls)(nil)).Elem()
}

func (i VirtualServiceSpecTlsArgs) ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput {
	return i.ToVirtualServiceSpecTlsOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsArgs) ToVirtualServiceSpecTlsOutputWithContext(ctx context.Context) VirtualServiceSpecTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsOutput)
}

// VirtualServiceSpecTlsArrayInput is an input type that accepts VirtualServiceSpecTlsArray and VirtualServiceSpecTlsArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsArrayInput` via:
//
//          VirtualServiceSpecTlsArray{ VirtualServiceSpecTlsArgs{...} }
type VirtualServiceSpecTlsArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput
	ToVirtualServiceSpecTlsArrayOutputWithContext(context.Context) VirtualServiceSpecTlsArrayOutput
}

type VirtualServiceSpecTlsArray []VirtualServiceSpecTlsInput

func (VirtualServiceSpecTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTls)(nil)).Elem()
}

func (i VirtualServiceSpecTlsArray) ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput {
	return i.ToVirtualServiceSpecTlsArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsArray) ToVirtualServiceSpecTlsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecTlsOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTls)(nil)).Elem()
}

func (o VirtualServiceSpecTlsOutput) ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput {
	return o
}

func (o VirtualServiceSpecTlsOutput) ToVirtualServiceSpecTlsOutputWithContext(ctx context.Context) VirtualServiceSpecTlsOutput {
	return o
}

func (o VirtualServiceSpecTlsOutput) Match() VirtualServiceSpecTlsMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTls) []VirtualServiceSpecTlsMatch { return v.Match }).(VirtualServiceSpecTlsMatchArrayOutput)
}

// The destination to which the connection should be forwarded to.
func (o VirtualServiceSpecTlsOutput) Route() VirtualServiceSpecTlsRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTls) []VirtualServiceSpecTlsRoute { return v.Route }).(VirtualServiceSpecTlsRouteArrayOutput)
}

type VirtualServiceSpecTlsArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTls)(nil)).Elem()
}

func (o VirtualServiceSpecTlsArrayOutput) ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsArrayOutput) ToVirtualServiceSpecTlsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTls {
		return vs[0].([]VirtualServiceSpecTls)[vs[1].(int)]
	}).(VirtualServiceSpecTlsOutput)
}

type VirtualServiceSpecTlsMatch struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets []string `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port *int `pulumi:"port"`
	// SNI (server name indicator) to match on.
	SniHosts     []string          `pulumi:"sniHosts"`
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

// VirtualServiceSpecTlsMatchInput is an input type that accepts VirtualServiceSpecTlsMatchArgs and VirtualServiceSpecTlsMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsMatchInput` via:
//
//          VirtualServiceSpecTlsMatchArgs{...}
type VirtualServiceSpecTlsMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput
	ToVirtualServiceSpecTlsMatchOutputWithContext(context.Context) VirtualServiceSpecTlsMatchOutput
}

type VirtualServiceSpecTlsMatchArgs struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets pulumi.StringArrayInput `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SNI (server name indicator) to match on.
	SniHosts     pulumi.StringArrayInput `pulumi:"sniHosts"`
	SourceLabels pulumi.StringMapInput   `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
}

func (VirtualServiceSpecTlsMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTlsMatchArgs) ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput {
	return i.ToVirtualServiceSpecTlsMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsMatchArgs) ToVirtualServiceSpecTlsMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsMatchOutput)
}

// VirtualServiceSpecTlsMatchArrayInput is an input type that accepts VirtualServiceSpecTlsMatchArray and VirtualServiceSpecTlsMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsMatchArrayInput` via:
//
//          VirtualServiceSpecTlsMatchArray{ VirtualServiceSpecTlsMatchArgs{...} }
type VirtualServiceSpecTlsMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput
	ToVirtualServiceSpecTlsMatchArrayOutputWithContext(context.Context) VirtualServiceSpecTlsMatchArrayOutput
}

type VirtualServiceSpecTlsMatchArray []VirtualServiceSpecTlsMatchInput

func (VirtualServiceSpecTlsMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTlsMatchArray) ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput {
	return i.ToVirtualServiceSpecTlsMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsMatchArray) ToVirtualServiceSpecTlsMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsMatchArrayOutput)
}

type VirtualServiceSpecTlsMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTlsMatchOutput) ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchOutput) ToVirtualServiceSpecTlsMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchOutput {
	return o
}

// IPv4 or IPv6 ip addresses of destination with optional subnet.
func (o VirtualServiceSpecTlsMatchOutput) DestinationSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.DestinationSubnets }).(pulumi.StringArrayOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecTlsMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SNI (server name indicator) to match on.
func (o VirtualServiceSpecTlsMatchOutput) SniHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.SniHosts }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecTlsMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecTlsMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTlsMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTlsMatchArrayOutput) ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchArrayOutput) ToVirtualServiceSpecTlsMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTlsMatch {
		return vs[0].([]VirtualServiceSpecTlsMatch)[vs[1].(int)]
	}).(VirtualServiceSpecTlsMatchOutput)
}

type VirtualServiceSpecTlsMatchSourcelabels struct {
}

type VirtualServiceSpecTlsRoute struct {
	Destination *VirtualServiceSpecTlsRouteDestination `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecTlsRouteInput is an input type that accepts VirtualServiceSpecTlsRouteArgs and VirtualServiceSpecTlsRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteInput` via:
//
//          VirtualServiceSpecTlsRouteArgs{...}
type VirtualServiceSpecTlsRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput
	ToVirtualServiceSpecTlsRouteOutputWithContext(context.Context) VirtualServiceSpecTlsRouteOutput
}

type VirtualServiceSpecTlsRouteArgs struct {
	Destination VirtualServiceSpecTlsRouteDestinationPtrInput `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecTlsRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteArgs) ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput {
	return i.ToVirtualServiceSpecTlsRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteArgs) ToVirtualServiceSpecTlsRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteOutput)
}

// VirtualServiceSpecTlsRouteArrayInput is an input type that accepts VirtualServiceSpecTlsRouteArray and VirtualServiceSpecTlsRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteArrayInput` via:
//
//          VirtualServiceSpecTlsRouteArray{ VirtualServiceSpecTlsRouteArgs{...} }
type VirtualServiceSpecTlsRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput
	ToVirtualServiceSpecTlsRouteArrayOutputWithContext(context.Context) VirtualServiceSpecTlsRouteArrayOutput
}

type VirtualServiceSpecTlsRouteArray []VirtualServiceSpecTlsRouteInput

func (VirtualServiceSpecTlsRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteArray) ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput {
	return i.ToVirtualServiceSpecTlsRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteArray) ToVirtualServiceSpecTlsRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteArrayOutput)
}

type VirtualServiceSpecTlsRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteOutput) ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteOutput) ToVirtualServiceSpecTlsRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteOutput) Destination() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRoute) *VirtualServiceSpecTlsRouteDestination { return v.Destination }).(VirtualServiceSpecTlsRouteDestinationPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecTlsRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTlsRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteArrayOutput) ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteArrayOutput) ToVirtualServiceSpecTlsRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTlsRoute {
		return vs[0].([]VirtualServiceSpecTlsRoute)[vs[1].(int)]
	}).(VirtualServiceSpecTlsRouteOutput)
}

type VirtualServiceSpecTlsRouteDestination struct {
	// The name of a service from the service registry.
	Host *string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecTlsRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecTlsRouteDestinationInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationArgs and VirtualServiceSpecTlsRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationInput` via:
//
//          VirtualServiceSpecTlsRouteDestinationArgs{...}
type VirtualServiceSpecTlsRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput
	ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationOutput
}

type VirtualServiceSpecTlsRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecTlsRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecTlsRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationOutput)
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationOutput).ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTlsRouteDestinationPtrInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationArgs, VirtualServiceSpecTlsRouteDestinationPtr and VirtualServiceSpecTlsRouteDestinationPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPtrInput` via:
//
//          VirtualServiceSpecTlsRouteDestinationArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecTlsRouteDestinationPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput
	ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput
}

type virtualServiceSpecTlsRouteDestinationPtrType VirtualServiceSpecTlsRouteDestinationArgs

func VirtualServiceSpecTlsRouteDestinationPtr(v *VirtualServiceSpecTlsRouteDestinationArgs) VirtualServiceSpecTlsRouteDestinationPtrInput {
	return (*virtualServiceSpecTlsRouteDestinationPtrType)(v)
}

func (*virtualServiceSpecTlsRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (i *virtualServiceSpecTlsRouteDestinationPtrType) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTlsRouteDestinationPtrType) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o.ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestination {
		return &v
	}).(VirtualServiceSpecTlsRouteDestinationPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Port() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutput() VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Elem() VirtualServiceSpecTlsRouteDestinationOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) VirtualServiceSpecTlsRouteDestination {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTlsRouteDestination
		return ret
	}).(VirtualServiceSpecTlsRouteDestinationOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Port() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestinationPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTlsRouteDestinationPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecTlsRouteDestinationPortInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationPortArgs and VirtualServiceSpecTlsRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPortInput` via:
//
//          VirtualServiceSpecTlsRouteDestinationPortArgs{...}
type VirtualServiceSpecTlsRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput
	ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecTlsRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortOutput)
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortOutput).ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTlsRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationPortArgs, VirtualServiceSpecTlsRouteDestinationPortPtr and VirtualServiceSpecTlsRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPortPtrInput` via:
//
//          VirtualServiceSpecTlsRouteDestinationPortArgs{...}
//
//  or:
//
//          nil
type VirtualServiceSpecTlsRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput
	ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput
}

type virtualServiceSpecTlsRouteDestinationPortPtrType VirtualServiceSpecTlsRouteDestinationPortArgs

func VirtualServiceSpecTlsRouteDestinationPortPtr(v *VirtualServiceSpecTlsRouteDestinationPortArgs) VirtualServiceSpecTlsRouteDestinationPortPtrInput {
	return (*virtualServiceSpecTlsRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecTlsRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecTlsRouteDestinationPortPtrType) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTlsRouteDestinationPortPtrType) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTlsRouteDestinationPort) *VirtualServiceSpecTlsRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestinationPort) VirtualServiceSpecTlsRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTlsRouteDestinationPort
		return ret
	}).(VirtualServiceSpecTlsRouteDestinationPortOutput)
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecInput)(nil)).Elem(), VirtualServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecPtrInput)(nil)).Elem(), VirtualServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpInput)(nil)).Elem(), VirtualServiceSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpArrayInput)(nil)).Elem(), VirtualServiceSpecHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpCorspolicyInput)(nil)).Elem(), VirtualServiceSpecHttpCorspolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpCorspolicyPtrInput)(nil)).Elem(), VirtualServiceSpecHttpCorspolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDelegateInput)(nil)).Elem(), VirtualServiceSpecHttpDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDelegatePtrInput)(nil)).Elem(), VirtualServiceSpecHttpDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpFaultInput)(nil)).Elem(), VirtualServiceSpecHttpFaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpFaultPtrInput)(nil)).Elem(), VirtualServiceSpecHttpFaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersPtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequestInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequestPtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponseInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMatchInput)(nil)).Elem(), VirtualServiceSpecHttpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMatchArrayInput)(nil)).Elem(), VirtualServiceSpecHttpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPortInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentageInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorpercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorpercentagePtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorpercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRetriesInput)(nil)).Elem(), VirtualServiceSpecHttpRetriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRetriesPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRetriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewriteInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewritePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteInput)(nil)).Elem(), VirtualServiceSpecHttpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteArrayInput)(nil)).Elem(), VirtualServiceSpecHttpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequestInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequestPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponseInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpInput)(nil)).Elem(), VirtualServiceSpecTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpArrayInput)(nil)).Elem(), VirtualServiceSpecTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpMatchInput)(nil)).Elem(), VirtualServiceSpecTcpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpMatchArrayInput)(nil)).Elem(), VirtualServiceSpecTcpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteInput)(nil)).Elem(), VirtualServiceSpecTcpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteArrayInput)(nil)).Elem(), VirtualServiceSpecTcpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPtrInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsInput)(nil)).Elem(), VirtualServiceSpecTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsArrayInput)(nil)).Elem(), VirtualServiceSpecTlsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsMatchInput)(nil)).Elem(), VirtualServiceSpecTlsMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsMatchArrayInput)(nil)).Elem(), VirtualServiceSpecTlsMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteInput)(nil)).Elem(), VirtualServiceSpecTlsRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteArrayInput)(nil)).Elem(), VirtualServiceSpecTlsRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPtrInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationPortArgs{})
	pulumi.RegisterOutputType(VirtualServiceSpecOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpCorspolicyOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpCorspolicyPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDelegateOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDelegatePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpFaultOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpFaultPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersRequestOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersRequestPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorpercentageOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorpercentagePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRetriesOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRetriesPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewriteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewritePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersRequestOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPortPtrOutput{})
}
